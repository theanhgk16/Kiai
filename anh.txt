@login_required
def listDocument(request):
    keyword = request.GET.get('keyword', '')
    subject_id = request.GET.get('subject_id', '')
    document = ExamManagement.objects.all()
#    filemodel = FileModel.objects.filter(
#      document=document).values_list('document', flat=True)
    if keyword or subject_id:
        documents = ExamManagement.objects.filter(Q(code__contains=keyword))
        if subject_id:
            documents = documents.filter(
                subject=Subject.objects.get(id=subject_id))
    else:
        documents = ExamManagement.objects.all()
    # Show number contacts per page.
    paginator = Paginator(documents, 5)
    page_number = request.GET.get('page')
    documents = paginator.get_page(page_number)
    try:
        documents = paginator.page(page_number)
    except PageNotAnInteger:

        documents = paginator.page(1)
    except EmptyPage:
        documents = paginator.page(paginator.num_pages)

    searchdocument = searchDocument(keyword, subject_id)
    filters = {
        'keyword': keyword,
        'documents': documents,
        'subject_id': subject_id,
    }
    
    #return render(request, 'document/list.html', {'documents': documents, 'subjects': Subject.objects.all(), 'searchdocument': searchdocument, 'filters': filters, 'filemodel':filemodel })
    return render(request, 'document/list.html', {'documents': documents, 'subjects': Subject.objects.all(), 'searchdocument': searchdocument, 'filters': filters, 'filemodel':filemodel })

@login_required
def createDocument(request):
    form = ExamManagementForm()
    if request.method == 'POST':
        form = ExamManagementForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('document-list')
    return render(request, 'document/form.html', {'form': form})

@csrf_exempt
@require_http_methods(["POST"])
def set_document_status(request, pk):
    document = ExamManagement.objects.get(pk=pk)
    document.status = request.GET.get('status')
    document.save()

    return HttpResponse(
        json.dumps({'success': True}), 
        content_type='application/json'
    )
  
# @login_required
# def uploadFile(request,id):
#     document = get_object_or_404(ExamManagement, pk=id)
#     form = DocumentForm()
#     if request.method == 'POST':
#         form = DocumentForm(request.POST,request.FILES)
#         FileModel.objects.create(
#             document=get_object_or_404(ExamManagement, pk=id),
#             doc = request.FILES['doc']
#         )
#         document.save()
#         return redirect('document-list', id)
#     return render(request, 'document/uploadFile.html', {'form': form, 'document': document})

@login_required
def uploadFile(request,id):
    document = get_object_or_404(ExamManagement, pk=id)
    form = DocumentForm()
    if request.method == 'POST'and 'doc' in request.FILES:
        form = DocumentForm(request.POST,request.FILES)
        if form.is_valid():
            FileModel.objects.create(
                document=document,
                doc = request.FILES['doc']
            )
            document.save()
        return redirect('result-document', id)
    return render(request, 'document/uploadFile.html', {'form': form, 'document': document,})  


@login_required
def resultDocument(request, id):
    document = get_object_or_404(ExamManagement, pk=id)
    return render(request, 'document/resultDocument.html', {'document': document})